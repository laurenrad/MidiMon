/* Copyright 2023 Lauren Rad
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Application: !Midimon
 * File: choiceswin.c
 * Author: Lauren Rad
 * Purpose: Wimp handlers for Choices window and associated helpers.
 */

#include <stdbool.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"
#include "event.h"
#include "toolbox.h"
#include "gadgets.h"
#include "window.h"
#include "msgs.h"               // RISC_OSLib
#include "msgtrans.h"           // RISC_OSLib
#include "werr.h"               // RISC_OSLib

// MidiMon stuff
#include "choices.h"
#include "preporter.h"
#include "common.h"
#include "choiceswin.h"
#include "midi.h"

#define Gadget_Choices_TxChan		0x00    // tx channel number range
#define Gadget_Choices_TxChanLabel	0x01    // label: "Tx Channel" (actually a button)
#define Gadget_Choices_AltNoteOff	0x02    // alt note off option button
#define Gadget_Choices_IgnoreClock	0x03    // ignore clock option button
#define Gadget_Choices_FakeFastClock	0x04    // fake fast clock option button
#define Gadget_Choices_DefaultButton	0x05    // default action button
#define Gadget_Choices_SaveButton	0x06    // save action button
#define Gadget_Choices_CancelButton	0x07    // cancel action button
#define Gadget_Choices_SetButton	0x08    // set action button
#define Gadget_Choices_UseHWDelay       0x09    // use hardware delay option button
#define Gadget_Choices_Outbound         0x0A    // show outbound comomands in monitor window

static ObjectId window_id_choices; // stored ObjectId of this window

int choices_set_button_click(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
int choices_save_button_click(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
int choices_default_button_click(int event_code, ToolboxEvent *event, IdBlock *id_block,
                                 void *handle);
int choices_cancel_button_click(int event_code, ToolboxEvent *event, IdBlock *id_block,
                                void *handle);
void refresh_gadgets(Choices c, IdBlock *id_block);
void store_gadgets(Choices *c, IdBlock *id_block);

/*
 * window_choices_create
 * This handler is called when the choices window is shown. This does any first-time setup
 * for the window, and makes sure the window is in step with any choices changes that
 * may have happened while it was closed.
 */
int window_choices_oncreate(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    ToolboxObjectAutoCreatedEvent *e = (ToolboxObjectAutoCreatedEvent *)event;

    if (strcmp(e->template_name,"Choices") == 0) {
#ifdef REPORTER_DEBUG
        report_printf("MidiMon: Choices created");
#endif
        window_id_choices = id_block->self_id;  // save ObjectId for later use
        refresh_gadgets(global_choices, id_block);  // sync gadgets with choices
        event_register_toolbox_handler(-1, Event_Choices_Set, choices_set_button_click, NULL);
        event_register_toolbox_handler(-1, Event_Choices_Save, choices_save_button_click, NULL);
        event_register_toolbox_handler(-1, Event_Choices_Default, choices_default_button_click,
                                       NULL);
        event_register_toolbox_handler(-1, Event_Choices_Cancel, choices_cancel_button_click, NULL);

        return 1;
    }

    return 0;
}


/*
 * choices_save_button_click
 * This handler is called when the 'Save' button is clicked. It both saves choices to disk
 * and causes the choices to take effect
 */
int choices_save_button_click(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    store_gadgets(&global_choices, id_block);
    if (save_choices() != 0) {
        report_printf("MidiMon: Error writing out Choices file");
        werr(0,"Unable to write Choices file. Choices will not be saved.");
    }
    action_choices(&global_choices);

    return 1;
}

/*
 * choices_set_button_click
 * This handler is called when the 'Set' button is clicked. It causes the choices to take
 * effect without storing them to disk.
 */
int choices_set_button_click(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    store_gadgets(&global_choices, id_block);
    action_choices(&global_choices);

    return 1;
}

/*
 * choices_default_button_click
 * This handler is called when the 'Default' button is clicked.
 * According to the RISC OS Style Guide, this should reset the gadgets to defaults AND
 * make the defaults active.
 */
int choices_default_button_click(int event_code, ToolboxEvent *event, IdBlock *id_block,
                                 void *handle)
{
    global_choices = init_choices();    // set active choices to defaults
    refresh_gadgets(global_choices, id_block);

    return 1;
}

/*
 * choices_cancel_button_click
 * This handler is called when the 'Cancel' button is clicked.
 * This discards all changes made.
 */
int choices_cancel_button_click(int event_code, ToolboxEvent *event, IdBlock *id_block,
                                void *handle)
{
    refresh_gadgets(global_choices, id_block);  // just set the gadgets back to whatever is stored

    return 1;
}

/*
 * refresh_gadgets
 * Update gadgets to reflect what is stored in choices.
 */
void refresh_gadgets(Choices c, IdBlock *id_block)
{
    numberrange_set_value(0, id_block->self_id, Gadget_Choices_TxChan, c.opt_txchan);
    optionbutton_set_state(0, id_block->self_id, Gadget_Choices_AltNoteOff, c.opt_altnoteoff);
    optionbutton_set_state(0, id_block->self_id, Gadget_Choices_IgnoreClock, c.opt_ignoreclock);
    optionbutton_set_state(0, id_block->self_id, Gadget_Choices_FakeFastClock, c.opt_fakefastclock);
    optionbutton_set_state(0, id_block->self_id, Gadget_Choices_UseHWDelay, c.opt_usehwdelay);
    optionbutton_set_state(0, id_block->self_id, Gadget_Choices_Outbound, c.opt_showoutbound);
}

/*
 * store_gadgets
 * Store the state of the gadgets to the given Choices struct.
 */
void store_gadgets(Choices *c, IdBlock *id_block)
{
    numberrange_get_value(0, id_block->self_id, Gadget_Choices_TxChan, &(c->opt_txchan));
    optionbutton_get_state(0, id_block->self_id, Gadget_Choices_AltNoteOff, &(c->opt_altnoteoff));
    optionbutton_get_state(0, id_block->self_id, Gadget_Choices_IgnoreClock, &(c->opt_ignoreclock));
    optionbutton_get_state(0, id_block->self_id, Gadget_Choices_FakeFastClock,
                           &(c->opt_fakefastclock));
    optionbutton_get_state(0, id_block->self_id, Gadget_Choices_UseHWDelay, &(c->opt_usehwdelay));
    optionbutton_get_state(0, id_block->self_id, Gadget_Choices_Outbound, &(c->opt_showoutbound));
}

/*
 * action_choices
 * Take action on choices after they're loaded or set. This only applies to choices where
 * immediate action is needed rather than being read later, like when a SWI is needed to
 * set an option with the MIDI module.
 */
void action_choices(Choices *const c)
{
    set_tx_channel(device_num, c->opt_txchan);
    ignore_timing(c->opt_ignoreclock);
    fake_fast_clock(c->opt_fakefastclock);
    set_hw_delay(c->opt_usehwdelay);
}
