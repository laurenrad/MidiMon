/* Copyright 2023 Lauren Rad
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Application: !Midimon
 * File: main.c
 * Author: Lauren Rad
 * Purpose: Main Wimp code for !Midimon.
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "wimp.h"
#include "toolbox.h"
#include "saveas.h"
#include "iconbar.h"
#include "proginfo.h"
#include "event.h"
#include "menu.h"
#include "wimplib.h"
#include "kernel.h"
#include "swis.h"
#include "msgs.h"               // RISC_OSLib
#include "msgtrans.h"           // RISC_OSLib
#include "werr.h"               // RISC_OSLib

// MidiMon stuff
#include "preporter.h"
#include "common.h"
#include "midi.h"
#include "monitorwin.h"
#include "choiceswin.h"
#include "pianowin.h"
#include "messageswin.h"
#include "songwin.h"
#include "ibar.h"
#include "infowin.h"

#define WimpVersion	310
struct Choices global_choices;
enum ModuleType g_modtype = Mod_Legacy; // module type
int device_num = -1;            // device number, numbered 0-3
static WimpPollBlock poll_block;
static MessagesFD messages;
static IdBlock id_block;
static int quit = 0;
msgtrans_control_block *cb; // control block pointer for MessageTrans

int tbox_error_handler(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
int quit_event(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
int show_help(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
int tbox_error_handler(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
//int pollword_nonzero(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle);
int quit_message(WimpMessage *message, void *handle);
void register_handlers(void);

int main(void)
{
    int wimp_messages = 0;      // Receive all Wimp messages
    int toolbox_events = 0;     // Receive all Toolbox events
    int event_code;             // For event_poll
    _kernel_oserror *err;

    /*
     * Initialise the Toolbox
     */
    toolbox_initialise(0, WimpVersion, &wimp_messages, &toolbox_events, "<Midimon$Dir>", &messages,
                       &id_block, 0, 0, 0);

    /*
     * Initialise the event library
     */
    event_initialise(&id_block);

    /*
     * Set poll mask. Currently masking out:
     * - Null_Reason_Code
     * - Pointer_Leaving_Window
     * - Pointer_Entering_Window
     * - Lose_Caret
     * - Gain_Caret
     */
    //event_set_mask(0x1831);
    event_set_mask(0x400001);


    register_handlers();        // Register event and message handlers

    if (load_choices() != 0) {  // Something went wrong -- like Choices$Path is set incorrectly
        exit(EXIT_FAILURE);
    }

    /*
     * Before entering poll loop, empty the MIDI Rx buffer so new rx messages
     * are triggered, as they only trigger on an empty buf.
     * Also check that a MIDI module is actually loaded. Originally, this was
     * the only place where MIDI SWIs would be called other than in response
     * to events, so it doesn't quit, but that's less true with the
     * device scanning. But it may still need to improve its handling of
     * this in the event the MIDI module dies while the app is running.
     */
    err = _swix(MIDI_Init, _IN(0), 0);
    if (err != NULL && err->errnum == Error_SWINotKnown) {
        werr(1, "No MIDI module loaded!");
    } else {
        /*
         * Initial device setup.
         * This will attempt to handle the absense of MIDI_USBInfo, but it will
         * need to be tested with an older version of MidiSupport or something
         * that doesn't have it.
         */
        int device_count;
        err = _swix(MIDI_USBInfo, _IN(0) | _OUT(0), 0, &device_count);
        if (err != NULL && err->errnum == Error_SWINotKnown) {
            device_count = 1; // If this is a legacy driver, assume it only supports 1 device
            g_modtype = Mod_Legacy; // set known module type to legacy
            report_printf("MidiMon: Starting with legacy module.");
        } else {
            // Beware !
            for (int i = 1; i <= device_count; i++) {
                report_printf("  Device %d: %s",i,get_product_name(i));
            }
            g_modtype = Mod_USB; // This should either be USB-MIDI or a Pete's MidiSupport
            report_printf("MidiMon: Starting with USB module.");
        }
        device_num = 0; // default to the first device
        clear_rx_buf(); // clear rx buffers to ensure events will fire
        report_printf("MidiMon: MIDI Devices Connected: %d", device_count);
    }

    /*
     * Make choices take effect - this calls some MIDI SWIs so it needs to happen after the previous
     * check.
     */
    action_choices(&global_choices);

    /*
     * Initialise MessageTrans
     */

     msgs_init();
     cb = msgs_main_control_block(); // save pointer to control block

    /*
     *  Prepare to communicate with modules
     */
     int pollword;
    _swi(MIDIEvent_GetPollWord, _OUT(0), &pollword);

    /*
     * Begin poll loop
     */
    while (!quit) {

        err = event_poll(&event_code, &poll_block, (void *)pollword);
        if (err != NULL) {
            report_printf("Poll error: %d %s\n",err->errnum,err->errmess);
        }
    }

    msgtrans_close_file(cb); // close Messages file
    report_printf("MidiMon: exiting!");

    exit(EXIT_SUCCESS);

}

/*
 * quit_event
 * This handler is called when the Quit item is selected from the Iconbar menu.
 */
int quit_event(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    quit = 1;
    return 1;
}

/*
 * quit_message
 * This handler is called for Wimp Quit or PreQuit messages.
*/
int quit_message(WimpMessage *message, void *handle)
{
    quit = 1;
    return 1;
}

/*
 * show_help
 * This handler is called when the Help... option is selected from the Iconbar menu.
 * It opens the help file.
 */
int show_help(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    system("Filer_Run <MidiMon$Dir>.!Help");

    return 1;
}

/*
 * tbox_error_handler
 * This handler is called on Toolbox error events.
 */
int tbox_error_handler(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    ToolboxErrorEvent *e = (ToolboxErrorEvent *) event;

#ifdef REPORTER_DEBUG
    report_printf("MidiMon: A toolbox error occurred: %d %s", e->errnum, e->errmess);
#endif

    return 1;
}

/*
 * register_handlers
 * Registers various event handlers for the application.
 */
void register_handlers(void)
{
    /*
     * Generic Toolbox events
     */
    event_register_toolbox_handler(-1, 1, quit_event, NULL);
    event_register_toolbox_handler(-1, Toolbox_Error, tbox_error_handler, NULL);
    event_register_toolbox_handler(-1, Toolbox_ObjectAutoCreated, window_monitor_oncreate, NULL);

    /*
     * Toolbox events - window shown
     */
    event_register_toolbox_handler(-1, Event_Windows_ShowChoices, window_choices_onshow, NULL);
    event_register_toolbox_handler(-1, Event_Windows_ShowPiano, window_piano_onshow, NULL);
    event_register_toolbox_handler(-1, Event_Windows_ShowMessages, window_messages_onshow, NULL);
    event_register_toolbox_handler(-1, Event_Windows_ShowSong, window_song_onshow, NULL);
    event_register_toolbox_handler(-1, ProgInfo_AboutToBeShown, proginfo_onshow, NULL);

    /*
     * Toolbox events - Iconbar
     */
    event_register_toolbox_handler(-1, Event_Iconbar_ShowHelp, show_help, NULL);
    event_register_toolbox_handler(-1, Event_Iconbar_DeviceSelect, device_selection, NULL);
    event_register_toolbox_handler(-1, Event_Iconbar_Panic, midi_panic, NULL);
    event_register_toolbox_handler(-1, Event_Iconbar_ShowDevMenu, update_devices_menu, NULL);
    event_register_toolbox_handler(-1, Event_Iconbar_ResetMIDI, midi_reset, NULL);

    /*
     * Wimp messages
     */
    event_register_message_handler(Wimp_MQuit, quit_message, 0);
    event_register_message_handler(Wimp_MPreQuit, quit_message, 0);

    /*
     * Wimp event handlers
     */
    event_register_wimp_handler(-1, Wimp_EPollWordNonZero, key_pressed, NULL);
    event_register_wimp_handler(-1, Wimp_EPollWordNonZero, midi_incoming, NULL);
}
