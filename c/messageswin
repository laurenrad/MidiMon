/* Copyright 2023 Lauren Rad
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/*
 * Application: !Midimon
 * File: messageswin.c
 * Author: Lauren Rad
 * Purpose: Handlers for the messages window.
*/

#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#include "toolbox.h"
#include "gadgets.h"
#include "window.h"
#include "wimp.h"
#include "event.h"
#include "msgs.h"               // RISC_OSLib
#include "msgtrans.h"           // RISC_OSLib

#include "messageswin.h"
#include "common.h"
#include "midi.h"
#include "preporter.h"

#define Gadget_Msg_ProgChgStr		0x02    // StringSet: GM program names
#define Gadget_Msg_ProgChgSend		0x07    // Program Change Send button
#define Gadget_Msg_ProgChgNum		0x13    // Program Change numberrange
#define Gadget_Msg_CntlrLabel		0x0A    // Label: "Controller" (actually a button)
#define Gadget_Msg_ValueLabel		0x10    // Label: "Value" (actually a button)
#define Gadget_Msg_CtrlChgSend		0x0B    // control change send button
#define Gadget_Msg_CtrlChgCntlr		0x0C
#define Gadget_Msg_CtrlChgVal		0x0D
#define Gadget_Msg_CtrlChgLblBox	0x18    // Control change box label (actually a button)
#define Gadget_Msg_ProgChgLblBox	0x19    // Program change box label (actually a button)
#define Gadget_Msg_TuneReq		0x09    // Send tune request button
#define Gadget_Msg_SysReset		0x15    // Send system reset button
#define Gadget_Msg_TuneReqLabel		0x16    // Label: "Tune Request" (actually a button)
#define Gadget_Msg_SysResetLabel	0x17    // Label: "System Reset" (actually a button)
#define Gadget_Msg_MiscLblBox		0x1A    // Label: "Misc" (actually a button)
#define Gadget_Msg_BankSelectMSB        0x1B    // Bank Select MSB
#define Gadget_Msg_BankSelectLSB        0x1E    // Bank Select LSB
#define Gadget_Msg_BankSelectOpt        0x1F    // Option: Bank Select
#define Gadget_Msg_BankSelectMSB        0x1B

static ObjectId window_id_messages = -1;

int stringset_programchg(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
int button_progchgsend(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
int button_txcntrlchg(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
int button_txtunereq(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
int button_txsysreset(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);

/*
 * window_messages_oncreate
 * This handler is called when the Send Messages window is created.
 * Registers handlers, saves the ObjectId, and does any miscellaneous
 * first-time setup that may be needed.
 */
int window_messages_oncreate(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    ToolboxObjectAutoCreatedEvent *e = (ToolboxObjectAutoCreatedEvent *)event;

    if (strcmp(e->template_name,"Messages") == 0) {
#ifdef REPORTER_DEBUG
        report_printf("MidiMon: Messages created");
#endif
        window_id_messages = id_block->self_id;
        // load GM program names from the Messages file
        stringset_set_available(0, window_id_messages, Gadget_Msg_ProgChgStr,
                                msgs_lookup("Messages|31:Unable to read Messages file."));
        event_register_toolbox_handler(-1, Event_Msg_SendProgChg, button_progchgsend, NULL);
        event_register_toolbox_handler(-1, Event_Msg_TxCntrlChg, button_txcntrlchg, NULL);
        event_register_toolbox_handler(-1, Event_Msg_TxTuneReq, button_txtunereq, NULL);
        event_register_toolbox_handler(-1, Event_Msg_TxSysReset, button_txsysreset, NULL);
        event_register_toolbox_handler(-1, StringSet_ValueChanged, stringset_programchg, NULL);

        return 1;
    }

    return 0;
}

/*
 * stringset_programchg
 * This handler is called when a StringSet value is changed.
 * For this window, this is to handle the Program Change by GM patch dropdown.
 */
int stringset_programchg(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    if (id_block->self_id == window_id_messages
        && id_block->self_component == Gadget_Msg_ProgChgStr) {
        int index;

        // This event only gives the string, not the index, so get it.
        stringset_get_selected(1, window_id_messages, Gadget_Msg_ProgChgStr, &index);
        // Set the number range as this is what will be read when sending the message.
        numberrange_set_value(0, window_id_messages, Gadget_Msg_ProgChgNum, index);
    } else {
        return 0;               // this wasn't for this window, so return unhandled.
    }
    return 1;
}

/*
 * button_progchgsend
 * This handler is called when the Send button is clicked for Program Change messages.
 * It sends the selected Program Change message.
 * This event is generated by the window, so it's safe to assume the window ID is known.
 */
int button_progchgsend(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    int prog = 0, state = 0, msb = 0, lsb = 0;

    /* Check if a bank select needs to happen first */
    optionbutton_get_state(0, window_id_messages, Gadget_Msg_BankSelectOpt, &state);
    if (state) {
        numberrange_get_value(0, window_id_messages, Gadget_Msg_BankSelectMSB, &msb);
        numberrange_get_value(0, window_id_messages, Gadget_Msg_BankSelectLSB, &lsb);
        tx_controlchg(0, msb); // send msb
        tx_controlchg(32, lsb); // send lsb
    }

    numberrange_get_value(0, window_id_messages, Gadget_Msg_ProgChgNum, &prog);
    tx_progchg(prog);

    return 1;
}

/*
 * button_txcntrlchg
 * This handler is called when the Send button is clicked for Control Change messages.
 * It sends the desired Control Change message.
 * The event is generated by the window, so it's safe to assume the window ID is known.
 */
int button_txcntrlchg(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    int control = 0;            // Controller number
    int value = 0;              // Value to send

    numberrange_get_value(0, window_id_messages, Gadget_Msg_CtrlChgCntlr, &control);
    numberrange_get_value(0, window_id_messages, Gadget_Msg_CtrlChgVal, &value);
    tx_controlchg(control, value);

    return 1;
}

/*
 * button_txtunereq
 * This handler is called when the Send button is clicked for the Tune Request command.
 * It sends the desired command.
*/
int button_txtunereq(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    tx_tunereq();
    return 1;
}

/*
 * button_txsysreset
 * This handler is called when the Send button is clicked for the System Reset command.
 * Sends a System Reset command.
 */
int button_txsysreset(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    tx_sysreset();
    return 1;
}
