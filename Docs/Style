/------------------\
| Part 1 - General |
\------------------/
- Code can use any C99 features available in the Acorn/Norcroft C compiler.
- The app name is MidiMon (MIDI is not cased as an acronym as it looks better this way)
- Reporter output: all reporter output should start with "MidiMon:" unless it is continuing a
  previous message, in which case it should indent with two spaces. A compile-time option will    turn on/off any messages which are useful only for debug.
- Use C++ style comments for inline commments.
- Both parameters and arguments for functions should be space separated.
- Anything not specified here will defer to Linux kernel style guidelines; these were chosen
  somewhat arbitrarily, albeit for their easily accessible documentation.
- Here are some notable exceptions to the above:
    * Lines are to be limited to 100 columns, not 80.
    * Indents are 4 characters, not 8.
    * Typedefs are absolutely ok to use with structs and other user types, especially
      as this is what the Acorn headers do.
- This code was written in Zap, with 4 char column tabs (using spaces).
- To summarize some other points from the style guide referenced above:
    * K&R brace style is to be used throughout.

/----------------------\
| Part 2 - File Naming |
\----------------------/
- Source files corresponding to a certain window should end in "win", as in "choiceswin, 
"messageswin"

/------------------------------\
|   Part 3 - Function Naming   |
\------------------------------/

- In function names, all references to transmitting MIDI should use the
abbreviation tx rather than send. For example: tx_noteoff to call the
MIDI_TxNoteOff SWI. It's more compact and consistent with the module.
- Gadget handlers should start with the gadget name, like "button_progchgsend()"

/----------------------------------------\
| Part 4 - Toolbox Event Names & Numbers |
\----------------------------------------/
- Toolbox event numbers should start at 0x0F00.
- Toolbox event constant names should be in the general form:
	Event_Component_Action
  Where the component is the window or program part the event pertains   to (has nothing to do with component IDs.)
  
/------------------------\
| Part 5 - Documentation |
\------------------------/
- Interactive help:
	- I can't find much on this in the official style guide, so I'm
	  making this up on my own mostly.
	- If the control has a separate label, the help should be on the
	  control, not the label.
	- For menus: "Click SELECT to view help." etc